
Data Binding - Automatic synchronization of data between the model and view components.
The model is the single-source-of-truth for the application state.
The view is a instant projection of the model at all times. When the model changes, the view reflects the change, and vice versa.
This avoids active manipulation of the DOM and supports bootstrapping and rapid development of web applications.
$scope service in Angular, detects changes to the model and modifies HTML in the view accordingly.
Any modification in the view are updated in the model via controller in the same way.

Controllers add data and methods to $scope as properties
HTML elements select a controller
with ng-controller attribute
in effect for the element and its descendants
Form elements bind to $scope properties
with ng-model attribute
Binding expressions access data and methods
on $scope of their controller
expressions in double-curly braces {{ }} that appear in HTML attribute values and element content
When JavaScript code changes value of a $scope property ...
form elements that refer to them with ng-model are updated
binding expressions that refer to them are updated
When user changes value of an form element ...
$scope property referred to by the ng-model attribute is updated

Use Case and benefits
As the view is just a projection of the model, the controller is completely separated from the view.
This makes testing a snap because it is easy to test your controller in isolation without the view and the related DOM/browser dependency.

ng-model Directive
ng-model directive updated the model when the view changes.
ng-model directive can be used with 
Input
Select
textarea

Overview
A JavaScript constructor function that is used to augment the Angular Scope.
Attached to the DOM via the ng-controller directive.
Contain only the business logic needed for a single view 
Controllers Assigns properties to $scope  at the time in DOM which creates and updates the model. 
Controllers add data and methods to $scope
for use in model bindings (ng-model attribute),
binding expressions {{expression}}
and event handling directives (ex. ng-click)
Controller methods can be created through direct assignment to scope.
$controller service takes care of instantiating controllers.
Can depend on services and invoke their methods
Controllers are not singletons
controller functions are invoked each time the associated view is rendered
local variables in controller functions are lost, so state cannot be maintained in them

Do not use controllers to 
Manipulate DOM — Use data binding and directives instead
Format input — Use angular form controls instead.
Filter output — Use angular filters instead.
Share code or state across controllers — Use angular services instead.
Manage the life-cycle of other components (for example, to create service instances

http://jsfiddle.net/KuldeepGupta/emywcjsh/

1. Updating a temple when input text changes
http://jsfiddle.net/KuldeepGupta/vftytb3p/

2. Data Binding with many text Inputs
http://jsfiddle.net/KuldeepGupta/np0h39qa/

3. Data binding with  different ng-model object
http://jsfiddle.net/KuldeepGupta/wo3t21c5/

4. Clearing the entered name on submit using data binding
http://jsfiddle.net/KuldeepGupta/skthw5o9/
To create a controller
app.controller('name', function (services) { ... });
controller names are typically camel-case with first letter uppercase, ending with “Ctrl”
services is a list of service names this controller uses as separate parameters, not an array
services are provided via dependency injection






To use a controller
add ng-controller attribute to an HTML element
	


Controllers can be added in AngularJS in three ways
Declaring controller as a global function
Declaring controller on entire App
Declaring controller in a module

Declaring Controller for entire App

Angular code can be written more efficiently by creating modules.



The module can now be set as the app module.
		

This approach prevents pollution of global namespace
The module ‘myModule’ will be loaded when Angular app loads and hence the component associated with the main module will also be loaded.
Controllers can also be added to the main module.

http://jsfiddle.net/KuldeepGupta/uyo8kcar/

http://jsfiddle.net/KuldeepGupta/jzpw2ebf/
http://jsfiddle.net/KuldeepGupta/7d0L60m7/
http://jsfiddle.net/KuldeepGupta/ws2c95gt/
Scope and Scope Characteristics
What are Scopes?
Scope is an object that refers to the application model. 
It is an execution context for expressions.
Scopes are arranged in hierarchical structure which mimic the DOM structure of the application.
Provide access to data and methods within the scope of a controller
Scopes can watch expressions and propagate events.

$Scope service
a provided service that can be injected into controllers to access current scope
to add data, $scope.name = value;
to add a method, $scope.fnName = function (...) { ... };
to get parent scope, $scope.parent()

Scopes characteristics
Scopes provide APIs ($watch) to observe model mutations.
Scopes provide APIs ($apply) to propagate any model changes through the system into the view from controllers, services, Angular event handlers. Scopes are arranged in hierarchical structure which mimic the DOM structure of the application.
Scopes can be nested. Nested scopes are either "child scopes" or "isolate scopes". 
A "child scope" (prototypically) inherits properties from its parent scope. An "isolate scope" does not.
Scopes provide context against which expressions are evaluated. 

Scope as a Data-Model
Scope is the glue between application controller and the view.
 It is an execution context for expressions.
$watch expressions on the scope allows the directives to be notified of property changes, which allows the directive to render the updated value to the DOM.
Both controllers and directives have reference to the scope, but not to each other which isolates the controller from the directive as well as from the DOM which make the controllers view agnostic.
Expressions are always evaluated in the local scope.
$rootScope is one instance per an Angular app and shared globally for all the controllers of the application
A model belongs to  one and only one scope
Any property on $scope object can be used in the view expressions.
Following directives automatically create scope :
ng-app(Root Scope)
ng-controller 
ng-repeat
http://jsfiddle.net/KuldeepGupta/7bpczjt2/

Scope Hierarchies
Scopes are usually connected via a hierarchy & the child scope has access to parent scope properties.
lookup starts at scope of controller and proceeds upward through scope hierarchy
Each Angular application has exactly one root scope, but may have several child scopes.
Creation of multiple scopes is also supported by Angular as some directives create new child scopes.
A child scope normally prototypically inherits from its parent scope.
New scopes automatically become children of their parent scope. This will create a tree structure. Which will be parallel to the DOM.
On encountering {{ emailed }}, the scope associated with the given element is checked.
If such a property is not found, Angular searches with the parent scope and move on until the root scope is reached.
Having a '.' in your models will ensure that prototypal inheritance is in play.
$parent.parentScopeProperty in the child scope prevent the child scope from creating its own property.
The following create new child scopes, and inherit prototypically: ng-repeat, ng-include, ng-switch, ng-view, ng-controller, directive with scope:true , directive with transclude:true.
The following creates a new scope which does not inherit prototypically: directive with scope: { … }. This creates an “isolate” scope.
By default, directives do not create new scope -- i.e., the default is scope:false.
For all scopes (prototypal or not), Angular always tracks a parent-child relationship (i.e., a hierarchy), via scope properties $parent, $$childHead and $$childTail.

Scope Types
Parent Scope (scope: false)—This is the default case. If your directive doesn't manipulate the parent scope properties you might not need a new scope. In this case, using the parent scope is okay.
Child Scope (scope:true)—This creates a new child scope for a directive which prototypically inherits from the parent scope. If the properties and functions you set on the scope are not relevant to other directives and the parent, you should probably create a new child scope. With this you also have all the scope properties and functions defined by the parent.
Isolated Scope (scope:{})— This is like a sandbox! You need this if the directive you're going to build is self-contained and reusable. Your directive might be creating many scope properties and functions which are meant for internal use, and should never be seen by the outside world. If this is the case, it’s better to have an isolated scope. The isolated scope, as expected, does not inherit the parent scope.

Scope Inheritance
Normal prototypal scope inheritance -- ng-include, ng-switch, ng-controller, directive with scope: true
Normal prototypal scope inheritance with a copy/assignment -- ng-repeat. Each iteration of ng-repeat creates a new child scope, and that new child scope always gets a new property.
Isolate scope inheritance-- directive with scope: {...}. This one is not prototypal, but '=', '@', and '&' provide a mechanism to access parent scope properties, via attributes.
Transcluded scope inheritance -- directive with transclude: true. This one is also normal prototypal scope inheritance, but it is also a sibling of any isolate scope. 
http://jsfiddle.net/KuldeepGupta/onn9qm7u/

Scope LifeCycle

Creation
During application bootstrapping, the root scope is created by the $injector.
New Child scopes are created by some directives during template linking.
Watcher registration
Watches are registered during template linking on the scope.
These watches are used to send model values to the DOM.

Model mutation
Mutations work properly only when applied within the scope.$apply(), which is by default.

Mutation observation
Angular runs $digest cycle on the root scope, after $apply.
During the $digest cycle, model mutations are verified for all $wated expressions.
If a mutation is found, the $watch listener is called.

Scope destruction
All child scopes which are not needed any longer, are destroyed via scope.$destroy() API
On destroying scope, the propagation of $digest calls to the child scope can be avoided.
This ensures that memory used by these childe scopes can be garbage collected.


SrootScope Service
$rootScope is the top level scope of an Angular app.
It is a provided service that can be injected into controllers to access root scope
Only 1 $rootScope exists in an App.
topmost common ancestor of all scopes
putting data here is a discouraged way of sharing data across controllers; better to use a service
$rootScope is created automatically by angular.
Any component can request for $rootScope via dependency injection





$rootScope can be used for making application level broadcasts.
Certain events are fired by angular API on the $rootScope
E.g. $locationChangeSuccess fired by $location

http://jsfiddle.net/KuldeepGupta/7yp520g4/
http://jsfiddle.net/KuldeepGupta/69uaksm1/

Scope Patterns - Observer
There are two basic ways of communication between the scopes
calling methods of parent scope by a child scope allows communication in a single direction - child to parent. 
Calling method of given child scope or notify it about a triggered event in the context of the parent scope. 
AngularJS provides built-in observer pattern.
Another possible use case, of the observer pattern, is when multiple scopes are interested in given event but the scope, in which context the event is triggered, is not aware of them. This allows decoupling between the different scopes, non of the scopes should be aware of the rest of the scopes.

Each AngularJS scope has public methods called $on, $emit and $broadcast. 
The method $on accepts topic as first argument and callback as second. 
We can think of the callback as an observer - an object, which implements the Observer interface. 

The methods $emit and $broadcast are used for triggering events respectively upwards and downwards through the scope chain. For example:
The scope in the example above, triggers the event event--‐name to all scopes upwards. 
Each of the parent scopes of the given one, which are subscribed to the event event--‐name, would be notified and their handler callback will be invoked.
Analogical is the case when the method $broadcast is called. 
In case of $broadcast, the only difference is that the event would be transmitted downwards - to all children scopes. 
Each scope can subscribe to any event with multiple callbacks (i.e. it can associate multiple observers to given event).
In the JavaScript community this pattern is better known as publish/subscribe.

Scope Patterns – Chain of Responsibility
In an AngularJS application form a hierarchy is there known as the scope chain. 
Some of the scopes are "isolated", which means that they don't inherit prototypically by their parent scope, but are connected to it via their $parent property.
When $emit or $broadcast are called, scope chain acts as event bus, or even more accurately chain of responsibilities. 
Once the event is triggered it is emitted downwards or upwards (depending on the method, which was called). 
Each subsequent scope may:
Handle the event and pass it to the next scope in the chain
Handle the event and stop its propagation
Pass the event to the next scope in the chain without handling it
Stop the event propagation without handling it

In the example above, ChildCtrl triggers an event, which is propagated upwards through the scope chain. 
Each of the parent scopes (the one used in ParentCtrl and the one used in MainCtrl) are going to handle the event by logging into the console: "foo received". 
If any of the scopes should be considered as final destination it can call the method stopPropagation of the event object, passed to the callback.

Scope Patterns – Command
ng--‐bind (for single-way data binding) and ng--‐model (for two-way data binding) are used to bind model to the view.
For example, if we want each change in the model foo to reflect the view we can:


Now each time we change the value of foo the inner text of the span will be changed. 
We can achieve the same effect with more complex AngularJS expressions, like:


In above the value of the span will be the concatenated uppercased value of foo and bar. 
What happens behind the scene?
Each $scope has method called $watch. When the AngularJS compiler find the directive ng--‐bind,  it creates a new watcher of the expression foo +''+bar|uppercase,i.e. 
   	scope.$watch ("foo +''+bar|uppercase",function(){/*body*/});. 
The callback will be triggered each time the value of the expression change. 
In the current case the callback will update the value of the span.


watcher object acts as a command. 
The expression of the command is being evaluated on each "$digest" loop. 
Once AngularJS detects change in the expression, it invokes the listener function. 
The watcher command encapsulates the whole information required for watching given expression and delegates the execution of the command to the listener (the actual receiver). 
We can think of the $scope as the command's Client and the $digest loop as the command's Invoker.

Forms
What are Forms?
A Form is a collection of controls (input, select, textarea) for the purpose of grouping related controls together.
Form and controls provide client-side validation services in Angular JS.

Adding Style and controls in Forms 
To allow styling of form as well as controls, ngModel adds these CSS classes:
ng-valid: the model is valid
ng-invalid: the model is invalid
ng-valid-[key]: for each valid key added by $setValidity
ng-invalid-[key]: for each invalid key added by $setValidity
ng-pristine: the control hasn't been interacted with yet
ng-dirty: the control has been interacted with
ng-touched: the control has been blurred
ng-untouched: the control hasn't been blurred
ng-pending: any $asyncValidators are unfulfilled

Implementing a Basic Form
A form to enter user details and capture this information in an Angular.js scope.
ngModel directive provides the two-way data-binding by synchronizing the model to the view, as well as view to the model. 
novalidate attribute disables the HTML5 validations, which are client-side validations supports
      by modern browsers.
http://jsfiddle.net/KuldeepGupta/585cogLu
Binding to Form and control State

http://jsfiddle.net/KuldeepGupta/asfwvkmm/

Displaying Form Validation Errors

http://jsfiddle.net/KuldeepGupta/m2410r2y/
Validating a Form Model Client-Side
http://jsfiddle.net/KuldeepGupta/haf34Lkg
Implementing Custom Validations

http://jsfiddle.net/KuldeepGupta/fydm46vw



Filter is used to 
Format
Sort 
Filter data
Filter can be applied in 
Expression 
Directives
Javascript
http://jsfiddle.net/KuldeepGupta/qvL4y4o3/





